macro -;
macro [100000;
macro *10 100000;
macro=;

warn -;
hold 10000;
mult: hold 30 replic 50;
ckeep;
log log; log/;

/*User specifies 2 chars in args.*/

var: charray [2] mxst trnum baselength a b max s corr;

set charray [0] %1;
set charray [1] %2;

set a nstates['charray[0]'];
set b nstates['charray[1]'];

set mxst maxstate['charray[0]'];
loop 1 1				/*Does the 2nd char have more states?*/
if (maxstate['charray[#1]'] > 'mxst')
	set mxst maxstate['charray[#1]'];
	end
stop

var: steparray [('mxst'+1), ('mxst'+1)];

collapse 3; collapse [;
taxcode -1;		/*Keep this active if scoring the wildcard character-by-character*/
if (ntax > 14)
	mult; else
	ie; end
best;
taxcode +1;
set baselength length[0];
	quote BASELENGTH 'baselength';
set trnum ntrees;
tsave * tntrees.tre;
save; tsave/;
cc !;

loop =stch0 0 ('a'-1)
xread= 'charray[0]' 1 #stch0;

loop =stch1 0 ('b'-1)
xread= 'charray[1]' 1 #stch1;

loop =constree 0 'trnum'
	keep 0;
	proc tntrees.tre;
	force >1;
	force / & #constree;
	constrain=;
silent=all;

if (ntax > 14)
	mult; else
	ie; end
best;
silent-all;
if (#constree == 0)
	set steparray [#stch0,#stch1] (length[0] - 'baselength');
	end
if ((#constree != 0) && ((length[0] - 'baselength') < 'steparray [#stch0,#stch1]'))
	set steparray [#stch0,#stch1] (length[0] - 'baselength');
	log+log; quote TREE #constree IS SHORTER; log/;
	end
if ((#constree !=0) && ((length[0] - 'baselength') >= 'steparray [#stch0,#stch1]'))
	continue;
	end

force ]; constrain -;
stop /*constree*/
stop /*stch1*/
stop /*stch0*/

set max (('a'*'b')-('a')-('b')+1);
set s 0; 
loop =x1 0 ('a'-1)
loop =x2 0 ('b'-1) 
set s+= 'steparray[#x1,#x2]';
log +log; quote CELL #x1 x #x2 IS 'steparray[#x1,#x2]'; log/;
stop
stop
set corr ('s'/'max');
log +log; quote Characters 'charray[0]' and 'charray[1]' have s = 's', max = 'max', and r = 'corr'; log/;

loop=p 0 ('mxst'-1);
loop=q 0 ('mxst'-1);
set steparray[#p,#q] 0;
stop
stop

xread= 'charray[0]' 1 -;
xread= 'charray[1]' 1 -;

force ];
keep 0;
proc/;
